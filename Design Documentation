# Author: Thomas Lander
# Date: 11/08/24
# Design Documentation

My simple C compiler works off of the following grammar:
        Program -> Statement
        Statement -> Declaration | Assignment | UnaryExp | Expression | If_Stmnt | While_Loop | For_Loop | Return 
        Declaration -> Keyword + ID "=" ID | Keyword + ID "=" Value
        Assignment -> ID "=" Expression 
        UnaryExp -> ++ID | ID++ | --ID | ID--
        Expression -> Expression OP Term | Term
        If_Stmnt -> "if" "(" Expression ")" "{" Statement* "}" | "if" "(" Expression ")" "{" Statement* "}" "else" "{" Statement "}"
        While_Loop -> "while" "(" Expression ")" "{" Block "}"
        For_Loop -> "for" "(" Expression ";" Expression ";" Expression ")" "{" Statement "}"
        Return -> "return" + ID | "return" + Value
        Term -> Num | String | ID | Expression
        OP -> "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" 

It can parse the following into ASTs and Symbol Tables:
   1) Functions
   2) Function calls
   3) Declarations
   4) Assignments
   5) Statements
   6) Expressions (can handle int, float, hex, binary, octal, and string variables)
   7) Unary Expressions (Both pre and post ++ and --)
   8) If Statements
   9) While Loops
  10) For Loops
  11) Return Statements

My compiler then converts the AST into 3-Address Code and can perform the following optimizations 
   1) Constant Folding
   2) Constant Propogation
   3) Dead Code Elimination 

After converting to 3-Address Code and Optimizing, the last step is conversion to x86 Assembly Code
   